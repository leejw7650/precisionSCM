for(i in 1:(k^2*p)){
if(vecA1[i] == 1){
id = sum(vecA1[1:i]);
R[i,id] = 1;
}
}
#  Sigma_update = VHAR.sigma(y, x, hatA0)$Sigma_z;
Sigma_update = VHAR.sigma(y, x, A.lasso)$Sigma_z;
sv=svd(Sigma_update)
szInv = sv$u%*%diag(1/sv$d)%*%t(sv$v)
varA1 = solve(t(R) %*% kronecker(x %*% t(x), szInv) %*% R);
A1.db = matrix( R %*% varA1 %*% t(R) %*% kronecker(x, szInv) %*% as.vector(y), nrow=k);
return(A1.db)
}
# Combine knockoff functions
knockoff.combine <- function(data, k = c('FX'), s = c('equi'), updateSigma = FALSE, debiasTF = TRUE, stat = stat.glmnet_coefdiff, FDR = 0.2, offset = 0){
result <- list()
for(knockoff.type in k){
for(s.type in s){
if(knockoff.type == 'FX' & s.type == 'asdp'){next}
r1 <- 0
while(sum(r1) == 0){
knockoffs <- knockoff.method(knockoff.type = knockoff.type, s.type = s.type)
r <- knockoff.W(train, knockoffs = knockoffs, updateSigma = TRUE, statistic = stat)
r1 <- MSP_matrix(knockoff.selected(r$statistic, FDR = FDR, offset = offset)$fdr0.2)
}
result[[paste(knockoff.type,s.type)]] <- r1
print(paste(knockoff.type, s.type, 'done'))
}
}
return(result)
}
x_new <- knockoff.filter(x,y)
x_new
x_new <- knockoff.filter(x,y)
x_new
x_new <- create.fixed(x, method = c("equi"))
x_new
x <- QuickStartExample$x[,1:5]
y <- QuickStartExample$y
x_new <- create.fixed(x, method = c("equi"))
fit <- glmnet(x[,1:5], y)
cbind(x,x_new)
x <- QuickStartExample$x[,1:5]
y <- QuickStartExample$y
x_new <- create.fixed(x, method = c("equi"))
x_comb <- cbind(x, x_new)
x_comb
x_new
x
x_new <- create.fixed(x, method = c("equi"))
x_new$X
x
x_new$X
x_new$X
a <- x_new$X
a <- x_new$X
a <- x_new$Xk
b <- x_new$X
x_comb <- cbind(x, x_new$X)
fit <- glmnet(cbind(x,x_new), y)
fit <- glmnet(x_comb, y)
plot(fit)
x_comb <- cbind(a, b)
fit <- glmnet(x_comb, y)
plot(fit)
plot(fit,ylim = c(-5,5))
plot(fit,ylim = c(-10,10))
x_new <- create.fixed(x, method = c("equi"))
a <- x_new$Xk
b <- x_new$X
x_comb <- cbind(a, b)
fit <- glmnet(x_comb, y)
plot(fit,ylim = c(-10,10))
colnames <- c("X1","X2","X3","X4","X5","X1t","X2t","X3t","X4t","X5t")
fit <- glmnet(x_comb, y)
plot(fit,ylim = c(-10,10))
plot(fit,ylim = c(-10,10), label = TRUE)
plot(fit, label = TRUE)
plot(fit,xvar = "lambda", label = TRUE)
plot_glmnet(fit)
library(plotmo) # for plot_glmnet
install.packages(plotmo)
install.packages('plotmo')
library(plotmo) # for plot_glmnet
data(QuickStartExample)
x <- QuickStartExample$x[,1:5]
y <- QuickStartExample$y
x_new <- create.fixed(x, method = c("equi"))
a <- x_new$Xk
b <- x_new$X
x_comb <- cbind(a, b)
colnames <- c("X1","X2","X3","X4","X5","X1t","X2t","X3t","X4t","X5t")
fit <- glmnet(x_comb, y)
plot_glmnet(fit)
plot_glmnet(fit,label = TRUE)
fit
x <- QuickStartExample$x#[,1:5]
y <- QuickStartExample$y
fit <- glmnet(x, y)
plot(fit,xvar = "lambda", label = TRUE)
plot_glmnet(fit,label = TRUE)
x <- QuickStartExample$x[,c(1,14,20,6,3)]
y <- QuickStartExample$y
fit <- glmnet(x, y)
plot_glmnet(fit,label = TRUE)
x <- QuickStartExample$x[,c(1,14,20,6,3)]
y <- QuickStartExample$y
x_new <- create.fixed(x, method = c("equi"))
a <- x_new$Xk
b <- x_new$X
x_comb <- cbind(a, b)
colnames <- c("X1","X2","X3","X4","X5","X1t","X2t","X3t","X4t","X5t")
fit <- glmnet(x, y)
fit <- glmnet(x, y)
plot(fit,xvar = "lambda", label = TRUE)
plot_glmnet(fit,label = TRUE)
fit <- glmnet(x_comb, y)
plot(fit,xvar = "lambda", label = TRUE)
plot_glmnet(fit,label = TRUE)
x_comb <- cbind(a, b)
x_new <- create.fixed(x, method = c("equi"))
a <- x_new$Xk
b <- x_new$X
x_comb <- cbind(a, b)
colnames <- c("X1","X2","X3","X4","X5","X1t","X2t","X3t","X4t","X5t")
fit <- glmnet(x_comb, y)
plot(fit,xvar = "lambda", label = TRUE)
plot_glmnet(fit,label = TRUE)
a <- x_new$X
b <- x_new$Xk
x_comb <- cbind(x, b)
colnames <- c("X1","X2","X3","X4","X5","X1t","X2t","X3t","X4t","X5t")
fit <- glmnet(x_comb, y)
plot(fit,xvar = "lambda", label = TRUE)
plot_glmnet(fit,label = TRUE)
x <- QuickStartExample$x#[,c(1,14,20,6,3)]
y <- QuickStartExample$y
fit <- glmnet(x, y)
plot(fit,xvar = "lambda", label = TRUE)
plot_glmnet(fit,label = TRUE)
x <- QuickStartExample$x[,c(1,9,14,19,20)]
y <- QuickStartExample$y
fit <- glmnet(x_comb, y)
x_new <- create.fixed(x, method = c("equi"))
a <- x_new$X
b <- x_new$Xk
x_comb <- cbind(x, b)
colnames <- c("X1","X2","X3","X4","X5","X1t","X2t","X3t","X4t","X5t")
fit <- glmnet(x_comb, y)
plot(fit,xvar = "lambda", label = TRUE)
plot_glmnet(fit,label = TRUE)
x <- QuickStartExample$x[,c(1,9,18,19,20)]
y <- QuickStartExample$y
x_new <- create.fixed(x, method = c("equi"))
a <- x_new$X
b <- x_new$Xk
x_comb <- cbind(a, b)
colnames <- c("X1","X2","X3","X4","X5","X1t","X2t","X3t","X4t","X5t")
fit <- glmnet(x_comb, y)
plot(fit,xvar = "lambda", label = TRUE)
plot_glmnet(fit,label = TRUE)
x <- QuickStartExample$x[,c(2,9,18,19,20)]
y <- QuickStartExample$y
x_new <- create.fixed(x, method = c("equi"))
a <- x_new$X
b <- x_new$Xk
x_comb <- cbind(a, b)
colnames <- c("X1","X2","X3","X4","X5","X1t","X2t","X3t","X4t","X5t")
fit <- glmnet(x_comb, y)
plot(fit,xvar = "lambda", label = TRUE)
plot_glmnet(fit,label = TRUE)
QuickStartExample
plot_glmnet(fit,label = c(1,2,3,4,5,1,2,3,4,5))
plot_glmnet(fit,label = TRUE
plot_glmnet(fit,label = TRUE)
plot_glmnet(fit,label = TRUE)
plot_glmnet(fit,label = TRUE,grid.col = 'red')
plot_glmnet(fit,label = TRUE)
x <- QuickStartExample$x[,c(2,9,18,19)]
y <- QuickStartExample$y
x_new <- create.fixed(x, method = c("equi"))
a <- x_new$X
b <- x_new$Xk
x_comb <- cbind(a, b)
colnames <- c("X1","X2","X3","X4","X5","X1t","X2t","X3t","X4t","X5t")
fit <- glmnet(x_comb, y)
plot(fit,xvar = "lambda", label = TRUE)
plot_glmnet(fit,label = TRUE)
x <- QuickStartExample$x[,c(3,9,18,19,20)]
y <- QuickStartExample$y
x_new <- create.fixed(x, method = c("equi"))
a <- x_new$X
b <- x_new$Xk
x_comb <- cbind(a, b)
colnames <- c("X1","X2","X3","X4","X5","X1t","X2t","X3t","X4t","X5t")
fit <- glmnet(x_comb, y)
plot(fit,xvar = "lambda", label = TRUE)
plot_glmnet(fit,label = TRUE)
x <- QuickStartExample$x[,c(5,9,18,19,20)]
y <- QuickStartExample$y
x_new <- create.fixed(x, method = c("equi"))
a <- x_new$X
b <- x_new$Xk
x_comb <- cbind(a, b)
colnames <- c("X1","X2","X3","X4","X5","X1t","X2t","X3t","X4t","X5t")
fit <- glmnet(x_comb, y)
plot(fit,xvar = "lambda", label = TRUE)
plot_glmnet(fit,label = TRUE)
x <- QuickStartExample$x[,c(6,9,18,19,20)]
y <- QuickStartExample$y
x_new <- create.fixed(x, method = c("equi"))
a <- x_new$X
b <- x_new$Xk
x_comb <- cbind(a, b)
colnames <- c("X1","X2","X3","X4","X5","X1t","X2t","X3t","X4t","X5t")
fit <- glmnet(x_comb, y)
plot(fit,xvar = "lambda", label = TRUE)
plot_glmnet(fit,label = TRUE)
x <- QuickStartExample$x[,c(2,9,18,19,20)]
y <- QuickStartExample$y
x_new <- create.fixed(x, method = c("equi"))
a <- x_new$X
b <- x_new$Xk
x_comb <- cbind(a, b)
colnames <- c("X1","X2","X3","X4","X5","X1t","X2t","X3t","X4t","X5t")
fit <- glmnet(x_comb, y)
plot(fit,xvar = "lambda", label = TRUE)
plot_glmnet(fit,label = TRUE)
x <- QuickStartExample$x[,c(3,9,18,19,20)]
y <- QuickStartExample$y
x_new <- create.fixed(x, method = c("equi"))
a <- x_new$X
b <- x_new$Xk
x_comb <- cbind(a, b)
colnames <- c("X1","X2","X3","X4","X5","X1t","X2t","X3t","X4t","X5t")
fit <- glmnet(x_comb, y)
plot(fit,xvar = "lambda", label = TRUE)
plot_glmnet(fit,label = TRUE)
x_comb <- cbind(x, b)
colnames <- c("X1","X2","X3","X4","X5","X1t","X2t","X3t","X4t","X5t")
fit <- glmnet(x_comb, y)
plot(fit,xvar = "lambda", label = TRUE)
plot_glmnet(fit,label = TRUE)
data(QuickStartExample)
x <- QuickStartExample$x[,c(3,9,18,19,20)]
y <- QuickStartExample$y
x_new <- create.fixed(x, method = c("equi"))
a <- x_new$X
b <- x_new$Xk
x_comb <- cbind(x, b)
colnames <- c("X1","X2","X3","X4","X5","X1t","X2t","X3t","X4t","X5t")
fit <- glmnet(x_comb, y)
plot(fit,xvar = "lambda", label = TRUE)
plot_glmnet(fit,label = TRUE)
fit
lines(x = log(0.79080))
ablines(x = log(0.79080), )
abline(x = log(0.79080), )
abline(v = log(0.79080), )
abline(v = c(log(0.79080), log(0.34230)))
abline(v = c(log(0.79080),
log(0.34230),
log(0.25890),
log(0.19590),
log(0.17850),
log(0.14820),
log(0.09306),
log(0.04852),
log(0.01914),
log(0.00247)), lty = 2)
plot_glmnet(fit,label = TRUE)
abline(v = c(log(0.79080),
log(0.34230),
log(0.25890),
log(0.19590),
log(0.17850),
log(0.14820),
log(0.09306),
log(0.04852),
log(0.01914),
log(0.00247)), lty = 2)
plot_glmnet(fit,label = TRUE)
abline(v = c(log(1.04500),
log(0.79080),
log(0.34230),
log(0.25890),
log(0.19590),
log(0.17850),
log(0.14820),
log(0.09306),
log(0.04852),
log(0.01914)), lty = 2)
abline(v = c(log(1.04500),
log(0.79080),
log(0.34230),
log(0.25890),
log(0.19590),
log(0.17850),
log(0.14820),
log(0.09306),
log(0.04852),
log(0.01914)), lty = 2, col = 'lightgrey')
plot_glmnet(fit,label = TRUE)
fit
abline(v = c(log(1.04500),
log(0.79080),
log(0.34230),
log(0.25890),
log(0.19590),
log(0.17850),
log(0.14820),
log(0.09306),
log(0.04852),
log(0.01914)), lty = 2, col = 'lightgrey')
abline(v = c(log(1.04500),
log(0.79080),
log(0.34230),
log(0.25890),
log(0.19590),
log(0.17850),
log(0.14820),
log(0.09306),
log(0.04852),
log(0.01914)), lty = 2, col = 'grey')
a <- matrix(c(1,-0.3,-0.4,-0.3,0.6,0,-0.4,-0.3,1),3,3,byrow = TRUE)
a
solve(a)
a_inv %*% t(c(2.56, 1.325, 0.25))
a_inv <- solve(a)
a_inv %*% t(c(2.56, 1.325, 0.25))
a_inv %*% c(2.56, 1.325, 0.25)
ARMAacf(ar=c(-0.3, -0.4), ma=c(1,0.25), lag.max=2)
ARMAacf(ar=c(0.3, 0.4), ma=c(1,0.25), lag.max=2)
ARMAacf(ar=c(0.3, 0.4), ma=c(1, 0.25), lag.max=2)*5.69444444
ARMAacvf(ar=c(0.3, 0.4), ma=c(1, 0.25), lag.max=2)*5.69444444
tacvfARMA
install.packages('Itsa')
install.packages('ltsa')
tacvfARMA
library(ltsa)
tacvfARMA
tacvfARMA(phi = c(0.3, 0.4), theta = c(1, 0.25), maxLag = 2)
tacvfARMA(phi = c(-0.3, -0.4), theta = c(1, 0.25), maxLag = 2)
tacvfARMA(phi = c(0.3, 0.4), theta = c(-1, -0.25), maxLag = 2)
a_inv %*% c(2.56, 1.325, 0.25)
b <- a_inv %*% c(2.56, 1.325, 0.25)
0.3*b[3] + 0.4*b[1]
0.3*b[3] + 0.4*b[2]
0.3*b[3] + 0.4*b[2]
tacvfARMA(phi = c(0.8), theta = c(-1, -0.5), maxLag = 2)
tacvfARMA(phi = c(0.3, 0.4), theta = c(-1, -0.25), maxLag = 2)
tacvfARMA(phi = c(0.8), theta = c(-0.5), maxLag = 2)
tacvfARMA(phi = c(-0.8), theta = c(0.5), maxLag = 2)
tacvfARMA(phi = c(-0.8), theta = c(-0.5), maxLag = 2)
tacvfARMA(phi = c(0.8), theta = c(0.5), maxLag = 2)
tacvfARMA(phi = c(0.8), theta = c(-0.5), maxLag = 2)
simtest<-arima.sim(model=list(ar=c(1,-0.3,-0.4),ma=c(1,1,0.25)),n=200)
acf(simtest)
acvf(simtest)
acf(simtest)
acf(simtest)
simtest
library(gtools)
library(rstudioapi)
library(aTSA)
library(tseries)
library(dplyr)
library(itsmr)
setwd(dirname(getActiveDocumentContext()$path))
rm(list = ls())
data_week_raw <- read.csv("data_oil_202205_weekly.csv", header = TRUE)
data_month_raw <- read.csv("data_oil_202205_monthly.csv", header = TRUE)
head(data_week_raw)
ts.plot(data_week_raw[,"WTI"])
mon <- c('Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec')
mon2 <- c('01','02','03','04','05','06','07','08','09','10','11','12')
for(i in 1:nrow(data_week_raw)){
date <- data_week_raw[i,1]
month <- mon[as.numeric(substr(date,6,7))]
year <- substr(date,3,4)
data_week_raw$date2[i] <- paste0(month,'.',year)
}
colnames(data_month_raw)
data_month_IP <- data_month_raw[,c("Date","US_IP","China_IP","EU19_IP","US.MB","EU.MB")]
colnames(data_month_IP) <- c("date2","US_IP","China_IP","EU19_IP","US.MB","EU.MB")
data_week_raw_mod <- data_week_raw[,-c(14:18)]
data <- left_join(data_week_raw_mod, data_month_IP, by = "date2")
data <- data[c(1:700),]
write.csv(data, file = "data_merged.csv")
for(i in data_month_raw$Date[-c(1:12)]){
index <- which(data$date2 == i)
data[head(index)[2]:tail(index,1),][,c("US_IP","China_IP","EU19_IP","US.MB","EU.MB")] <-  NA
}
data_linear <- data
data_linear[,"US_IP"][1:692] <- approx(data_linear[,"US_IP"][1:692],n = 692)$y
data_linear[,"China_IP"][1:688] <- approx(data_linear[,"China_IP"][1:688],n = 688)$y
data_linear[,"EU19_IP"][1:688] <- approx(data_linear[,"EU19_IP"][1:688],n = 688)$y
data_linear[,"US.MB"][1:692] <- approx(data_linear[,"US.MB"][1:692],n = 692)$y
data_linear[,"EU.MB"][1:692] <- approx(data_linear[,"EU.MB"][1:692],n = 692)$y
write.csv(data_linear, file = "data_linear_interpolate.csv")
################################################
head(data)
par(mfrow=c(1,1))
for(i in 1:nrow(data)){
date <- data[i,14]
month <- mon2[which(mon == substr(date,1,3))]
year <- substr(date,5,6)
data$date2[i] <- paste0(year,".",month)
}
ts.plot(data$WTI, ylab = "Price", main = "Oil price(monthly)")
WTI <- data %>% group_by(date2) %>% summarise(mean(WTI)) ; WTI <- WTI$'mean(WTI)'
WTI <- ts(WTI, start = 2009, frequency = 12)
ts.plot(WTI, ylab = "Price", main = "Oil price(weekly)")
par(mfrow = c(2,1))
acf(WTI, lag = 100)
pacf(WTI, lag = 100)
par(mfrow = c(1,1))
WTI_diff <- diff(WTI) ; n <- length(WTI_diff)
ts.plot(WTI_diff, main = "diff(WTI)", ylab = "price")
par(mfrow = c(2,1))
acf(WTI_diff, lag = 100)
pacf(WTI_diff, lag = 100)
qqnormPlot(WTI_diff)
test(WTI_diff) ; jarqueberaTest(WTI_diff)
n <- length(WTI_diff)
n_train <- floor(n * 0.85)
n_test <- n - n_train
train <- WTI_diff[1:n_train]
test <- WTI_diff[-c(1:n_train)]
par(mfrow=c(2,1))
acf(train,lag = 100)
pacf(train,lag = 100)
fit <- arima(train, order = c(1,0,1))
test(fit$residuals)
# n_train <- floor(n * 0.7)
# n_test <- n - n_train
#
# train <- ts(WTI_diff[1:n_train], start = 1)
# test <- ts(WTI_diff[(n_train+1):n], start = n_train+1)
# par(mfrow = c(1,1))
# ts.plot(train, col = 'red', xlim = c(0,150)) ; lines(test, col = 'blue')
#
# test(train) ; jarqueberaTest(train) ; adf.test(train, k = 5)
# comb <- expand.grid(rep(list(0:5), 2))
# mspe <- c()
#
# for(i in 1:nrow(comb)){
#   fit <- arima(train, order = c(comb[i,1],0,comb[i,2]))
#   prediction <- forecast(fit,45) ; title(paste0("arima(",comb[i,1],",",0,",",comb[i,2],")"))
#   lines(test,col = 'blue')
#   mspe <- c(mspe, mean((prediction[,2] - test[1:45])^2))
# }
order_selecting_arima <- function(train_set, valid_set, step = 10, d = 0){
n_train <- length(train)
train <- ts(train_set, start = 1)
valid <- ts(valid_set, start = length(train_set) + 1)
comb <- expand.grid(rep(list(0:5), 2))
mspe <- c()
for(i in 1:nrow(comb)){
fit <- arima(train, order = c(comb[i,1],d,comb[i,2]), method = 'ML')
prediction <- aTSA::forecast(fit, step) ; title(paste0("arima(",comb[i,1],",",d,",",comb[i,2],")"))
mspe <- c(mspe, mean((prediction[,2] - valid[1:step])^2))
lines(ts(valid[1:step],start = n_train + 1),col = 'blue')
}
mspe <- data.frame(mspe, row.names = paste0("(",comb[,1],",",d,",",comb[,2],")"))
structure(list(best.order = comb[(which(mspe == min(mspe))),], MSPE = mspe))
}
# select order by Information Criterion(especially AIC)
comb <- expand.grid(rep(list(0:5), 2))
aic <- c()
for(i in 1:nrow(comb)){
fit <- arima(train, order = c(comb[i,1],0,comb[i,2]), method = "ML")
aic <- c(aic, fit$aic)
}
comb[which(aic == min(aic)),]
fit <- arima(train, order = c(0,0,1))
test(fit$residuals)
# select order by prediction error
par(mfrow = c(1,1))
validation <- train[(n_train - n_test + 1):n_train]
train <- train[1:(n_train - n_test)]
result <- order_selecting_arima(train, validation, step = 10)
result$best.order
result$MSPE
arima(WTI, order = c(1,1,3))
prediction <- aTSA::forecast(arima(WTI_diff, order = c(3,0,4)), 10)
ts.plot(WTI_diff)
fit <- arima(train, order = c(3,0,4))
test(fit$residuals)
# predict test set
train
validation
test
fit1 <- arima(c(train, validation), order = c(0,0,1), method = "ML")
fit2 <- arima(c(train, validation), order = c(3,0,4), method = "ML")
prediction1 <- aTSA::forecast(fit1, n_test)
prediction2 <- aTSA::forecast(fit2, n_test)
n_train
title("ARIMA(0,0,1)") ; lines(lines(ts(test,start = n_train + 1),col = 'blue'))
prediction1 <- aTSA::forecast(fit1, n_test)
title("ARIMA(0,0,1)") ; lines(lines(ts(test,start = n_train + 1),col = 'blue'))
prediction2 <- aTSA::forecast(fit2, n_test)
title("ARIMA(3,0,4)") ; lines(lines(ts(test,start = n_train + 1),col = 'blue'))
MSPE1 <- mean((prediction1[,2] - test)^2)
MSPE1 <- mean((prediction2[,2] - test)^2)
MSPE1 <- mean((prediction1[,2] - test)^2)
MSPE2 <- mean((prediction2[,2] - test)^2)
prediction1 <- aTSA::forecast(fit1, n_test)
title("ARIMA(0,0,1)") ; lines(lines(ts(test,start = n_train + 1),col = 'blue'))
mean((prediction1[,2] - test)^2)
mean((prediction2[,2] - test)^2)
